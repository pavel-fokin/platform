// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CANDIDATE
  RECRUITER
}

enum PaymentStatus {
  PENDING
  ESCROW
  RELEASED
  REFUNDED
}

enum InterviewStatus {
  PENDING
  COMPLETED
}

model User {
  id        String   @id @default(uuid()) @map("id")
  email     String   @unique @map("email")
  role      UserRole @default(CANDIDATE) @map("role")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  candidateInterviews Interview[] @relation("CandidateInterviews")
  recruiterInterviews Interview[] @relation("RecruiterInterviews")

  @@map("user")
}

model Profile {
  id                String @id @default(uuid()) @map("id")
  userId            String @unique @map("user_id")
  name              String @map("name")
  role              String @map("role")
  yearsOfExperience Int    @map("years_of_experience")
  location          String @map("location")

  interviewRate         Float  @map("interview_rate")
  interviewRateCurrency String @map("interview_rate_currency")

  publishedAt   DateTime? @map("published_at")
  publishedLink String?   @unique @map("published_link")
  isPublished   Boolean   @default(false) @map("is_published")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("profile")
}

model Payment {
  id          String        @id @default(uuid()) @map("id")
  interviewId String        @unique @map("interview_id")
  amount      Float         @map("amount")
  currency    String        @map("currency")
  status      PaymentStatus @default(ESCROW) @map("status")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  interview   Interview     @relation("InterviewPayment", fields: [interviewId], references: [id])

  @@map("payment")
}

model Interview {
  id          String         @id @default(uuid()) @map("id")
  candidateId String         @map("candidate_id")
  recruiterId String         @map("recruiter_id")
  candidate   User           @relation("CandidateInterviews", fields: [candidateId], references: [id])
  recruiter   User           @relation("RecruiterInterviews", fields: [recruiterId], references: [id])
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  status      InterviewStatus @default(PENDING) @map("status")

  payment     Payment?       @relation("InterviewPayment")

  @@map("interview")
}
